#
# Configfile for Application Switcher3
#
[switcher]
# Dieser Abschnitt wird vom Switcher2 und seinen Klassen gelesen
 # GPIO Pin für Blink LED,  0: kein PIN verwendet               
gpio_blink = 5                          
# testmode Ja/Nein 
testmode = Nein
reserve = notused
wetter = Nein
# debug 0 : no debug output
# debug 1: wie -d on commendline
# debug 2: wie -D on commendline
# debug 3: wie -A on commendline
debug = 0

[home]
# dieser Abschnitt wird von der Klasse MyHome gelesen
#
# GPIO PIn für zuhausse Led, 0: kein PIN verwendet
gpio_home_led = 6
# GPIO Pin zuhause Kippschalter (Switcher V1) ,  0: kein PIN verwendet
gpio_home_switch = 0                   
 # GPIO Pin zuhause Pushbutton,  0: kein PIN verwendet
gpio_home_button = 13   

# 5 binary Schalter
schalter = 00001
# manuell_reset: wann sollen manuell geschaltete Dosen zurückgesetzt werden
# 1 : Mitternacht, 0: Nie
manuell_reset = 1


[sequencer]
# XML Steuerfile name
ctrl_file           = haus1_sommer
# Info für das ajustieren der Schaltzeiten
adjust_needed       = 1
evening_start_limit = 22.00
evening_ontime      = 15
morning_start_limit = 03.00 
morning_ontime      = 30



[mqtt]
# Switcher2 als IoT Gateway als MQTT publisher
#  IP-Adr des MQTT Brokers (empty means: this maschine)
mqtt_ipadr = 
mqtt_port = 1883
mqtt_keepalive_intervall = 45
mqtt_userid = test127
mqtt_pw = 123-123
mqtt_qos = 0
mqtt_retain = 0
retry_intervall = 4
retry_number = 3
userdata = "userdata"
#
[dose]
#  dosenmodus
#   modus 0: dose wir nur manuell geschaltet, Schaltaktionen im XML File werden ignoriert
#   modus 1: normal zu schaltende dose, also gemäss Angaben im XML File
#   modus 2: dose wird immer geschaltet, egal ob jemand zuhause ist oder nicht
dose_1_schaltprio = 1
dose_2_schaltprio = 1
dose_3_schaltprio = 1
dose_4_schaltprio = 1
dose_5_schaltprio = 1
dose_6_schaltprio = 1
# schaltart definiert die Art des Schaltens, es wird die entspr. Aktor-Klasse instantiiert
#       1: Für Testaufbau mit 4-5 Led , 
#       2: Funk mit 433 MHz Sender ,
#       3: Smart Switch (Sonoff), MQTT basiert
#       4: Funk mit Handsender (wie original Switcher)
#       5: Funk mit 433 Mhz Sender mit send Module 
#   Achtung:
#   Schaltart 1 ist für Testumgebung. 
#   wenn eine dose 1 schaltart 1 hat, müssen die anderen Dosen auch schaltart 1 haben
#   script sorgt dafür (mit Warnung), dass dies eingehalten wird.
#   Amsonsten ist schaltart frei wählbar
#   Bei Schaltart 3 gibt es zwei weitere Parameter, etwa so: 3,Y,X
#   Y: Art der MQTT Meldung, also Topic und Payload (1: Sonoff-SmartSwitches, 2: future use)
#   X: Smart Switch sendet Rückmeldung, also Susbcribe möglich: 0 Nein, 1 Ja 
#
#   Also: für 'normale' Sonoff Switches 3,1,1 setzen
dose_1_schaltart = 2
dose_2_schaltart = 2
dose_3_schaltart = 2
dose_4_schaltart = 2
dose_5_schaltart = 2
dose_6_schaltart = 2
#
#  debug schalten, die dose setzt statusmeldungen beim schalten ab, obwohl genereller dbug 0 ist
# hat sich bewährt beim Testen
debug_schalt = 1            


[aktor_1]
# Abschnitt wird von der Aktor_1 Klasse gelesen
# hier sind 5 GPIO Pins definiert
# Für Testumgebung mit 5 Led
gpio_1 = 12
gpio_2 = 19
gpio_3 = 20
gpio_4 = 21
gpio_5 = 24


[aktor_2]
# Abschnitt wird von den Aktor_2 Klasse gelesen
# hier ist ein GPIO Pins definiert (für Data zum 433 Mhz Sender)
# Für Version mit 433 Mhz Sender
gpio_1 = 17
# wiederholung beim Senden
repeat = 10
# code Länge beim Senden
codelength = 24
# dies sind die Parameter fürs Senden mit dem 433 MHz Sender
# ist für 4 Dosen definiert
# Werte wurden mit dem Script rpi-rf_receive.py gemessen ab Handsender
send_dat_1_ein = 66897,320,1
send_dat_1_aus = 66900,319,1
send_dat_2_ein = 69983,319,1
send_dat_2_aus = 69972,319,1
send_dat_3_ein = 70737,319,1
send_dat_3_aus = 70740,319,1
send_dat_4_ein = 70929,320,1
send_dat_4_aus = 70932,319,1

[aktor_3]
# Abschnitt wird von den Aktor_3 Klasse gelesen
# Switcher2 als IoT Gateway als MQTT publisher
#  IP-Adr des MQTT Brokers (empty means: this maschine)
# zur Zeit nur ein placeholder
placeholder = leer

[aktor_4]
# Abschnitt wird von den Aktor_4 Klasse gelesen
# hier sind 6 GPIO Pins definiert
# Für Funk mit angeflanschtem Handsender
gpio_1 = 4
gpio_2 = 12
gpio_3 = 77
gpio_4 = 66
gpio_5 = 17
gpio_6 = 99

[aktor_5]
# Abschnitt wird von den Aktor_5 Klasse gelesen
# Für Funk gemäss Habi
# gpio pin für send module (in wiringpi notation: 0 ist Pin 17)
gpio_send = 0
# system code eingestellt an den Dip Switches
system_code = 11101
# Pfad, wo das send module liegt
pfad_1 = /home/pi/switcher3/433_send/
#


#----------------------
